from flask import Flask, request, abort

from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import (
    InvalidSignatureError
)
from linebot.models import (
    FollowEvent, MessageEvent, TextMessage, TextSendMessage, StickerMessage, StickerSendMessage, ImageMessage, ImageSendMessage
)

app = Flask(__name__)

import os                         # Heroku
import random                     # GitHub
import pya3rt                     # A3RT/TalkAPI:requirements.txt
from tmdbv3api import TMDb, Movie # TMDb:requirements.txt

# get environment variables from Heroku(Settings/Config Variables)
LINE_CHANNEL_ACCESS_TOKEN = os.environ["LINE_CHANNEL_ACCESS_TOKEN"]
LINE_CHANNEL_SECRET       = os.environ["LINE_CHANNEL_SECRET"]
A3RT_TALKAPI_APIKEY       = os.environ["A3RT_TALKAPI_APIKEY"] # A3RT/TalkAPI
TMDB_API_KEY              = os.environ["TMDB_API_KEY"]        # TMDb

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler      = WebhookHandler(LINE_CHANNEL_SECRET)

@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

# MessageEvent
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    # get push message
    push_text = event.message.text
    # get reply message and type
    reply_text, reply_type, reply_package, reply_sticker = get_replymessage(push_text)
    # reply
    if (reply_type == 'text'):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text)
        )
    elif (reply_type == 'sticker'):
        line_bot_api.reply_message(
            event.reply_token,
            StickerSendMessage(package_id=reply_package,sticker_id=reply_sticker)
        )
    else:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text='„Ç®„É©„Éº„Åø„Åü„ÅÑ„Å†„Éã„É£„É≥')
        )

# return reply message and type
def get_replymessage(text):
    reply_text = ''
    reply_type = ''
    reply_package = ''
    reply_sticker = ''
    if ('„Åä„ÅÜ„ÇÄ' in text) or ('„Ç™„Ç¶„É†' in text) or ('È∏öÈµ°' in text) or ('ü¶ú' in text):
        reply_text = text
        reply_type = 'text'
    elif ('„Å°„ÇÖ„Éº„Çã' in text) or ('„ÉÅ„É•„Éº„É´' in text) or ('È£≤' in text) or ('È£ü' in text):
        reply_text = return_data('CIAO.txt')
        reply_type = 'text'
    elif ('„Çä„Çì„Çä„Çì' in text) or ('„Çä„Çì„Å°„ÇÉ„Çì' in text) or ('„Çä„Çì„Åü„Çç„ÅÜ' in text) or ('ÂáõÂ§™ÈÉé' in text):
        reply_text = return_data('RIN.txt')
        reply_type = 'text'
    elif ('„Åä„Çì„Åå„Åè' in text) or ('„ÅÜ„Åü' in text) or ('„Åç„Çá„Åè' in text) or ('Èü≥' in text) or ('Ê≠å' in text) or ('Êõ≤' in text):
        reply_text = '„Åì„Çå„ÇíËÅ¥„ÅÑ„Å¶„ÅÑ„Çã„Éã„É£„É≥\n' + return_data('MUSIC.txt')
        reply_type = 'text'
    # TMDb
    elif ('Êò†Áîª' in text):
        tmdb = TMDb()
        tmdb.api_key = TMDB_API_KEY
        tmdb.language = 'ja'
        tmdb.debug = True
        movie = Movie()
        popular = movie.popular()
        popular_titles = []
        popular_overviews = []
        for p in popular:
            popular_titles.append('üìΩ' + p.title)
            popular_overviews.append(p.overview)
        popular_index = random.randint(0,(len(popular_titles) - 1))
        reply_text = '„Åì„Çå„ÇíË¶≥„Å¶„ÅÑ„Çã„Éã„É£„É≥\n' + popular_titles[popular_index] + '\n' + popular_overviews[popular_index]
        reply_type = 'text'
    elif ('„Å¶„Çì„Åç' in text) or ('„Åç„Åä„Çì' in text) or ('Â§©Ê∞ó' in text) or ('Ê∞óÊ∏©' in text) or ('ÈôçÊ∞¥' in text):
        reply_text = '„Åì„Åì„ÇíË¶ã„Å¶„ÅÑ„Çã„Éã„É£„É≥\n' + 'https://www.google.co.jp/search?q=Â§©Ê∞ó'
        reply_type = 'text'
    elif ('„Åä„ÇÑ„Åô„Åø' in text):
        reply_type = 'sticker'
        s = random.randint(0,2)
        # ----- LINE Available sticker list
        #       https://developers.line.biz/media/messaging-api/sticker_list.pdf
        # Brown, Cony & Sally
        if (s == 0):
            reply_package = '11537'
            reply_sticker = random.choice(['52002753', '52002757', '52002764', '52002771'])
        # CHOCO & Friends
        elif (s == 1):
            reply_package = '11538'
            reply_sticker = random.choice(['51626513', '51626533'])
        # UNIVERSTAR BT21
        else:
            reply_package = '11539'
            reply_sticker = random.choice(['52114110', '52114120', '52114121', '52114128'])
        # -----
    # A3RT/TalkAPI
    else:
        reply_text = talkapi_response(text) + '„Éã„É£„É≥'
        reply_type = 'text'
    return reply_text, reply_type, reply_package, reply_sticker

# return reply message(data/*.txt)
def return_data(filename):
    path = os.getcwd() + '/data/' + filename
    with open(path) as data_text:
        lines = data_text.readlines()
    return lines[random.randint(0,(len(lines) - 1))].strip()

# return reply message(A3RT/TalkAPI)
def talkapi_response(text):
    apikey = A3RT_TALKAPI_APIKEY
    client = pya3rt.TalkClient(apikey)
    response = client.talk(text)
    return ((response['results'])[0])['reply']

if __name__ == "__main__":
   # get port from Heroku
   port = int(os.getenv("PORT"))
   app.run(host="0.0.0.0", port=port)
